package org.socraticgrid.hl7.services.ucs.accessclients.ucsclient;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.socraticgrid.hl7.services.uc.exceptions.BadBodyException;
import org.socraticgrid.hl7.services.uc.exceptions.FeatureNotSupportedException;
import org.socraticgrid.hl7.services.uc.exceptions.InvalidContentException;
import org.socraticgrid.hl7.services.uc.exceptions.InvalidMessageException;
import org.socraticgrid.hl7.services.uc.exceptions.MissingBodyTypeException;
import org.socraticgrid.hl7.services.uc.exceptions.ProcessingException;
import org.socraticgrid.hl7.services.uc.exceptions.ServiceAdapterFaultException;
import org.socraticgrid.hl7.services.uc.exceptions.UndeliverableMessageException;
import org.socraticgrid.hl7.services.uc.model.AlertMessage;
import org.socraticgrid.hl7.services.uc.model.Conversation;
import org.socraticgrid.hl7.services.uc.model.DeliveryAddress;
import org.socraticgrid.hl7.services.uc.model.Message;
import org.socraticgrid.hl7.services.uc.model.MessageModel;
import org.socraticgrid.hl7.services.uc.model.NotificationMessage;
import org.socraticgrid.hl7.services.uc.model.PhysicalAddress;
import org.socraticgrid.hl7.services.uc.model.SimpleMessage;

/**
 * This class was generated by Apache CXF 2.7.8 2014-01-31T11:31:07.981-08:00
 * Generated source version: 2.7.8
 * 
 */
public final class Ucsclient_UcsclientSEI_Demo {

	private static final QName SERVICE_NAME = new QName(
			"org.socraticgrid.hl7.services.uc.clients",
			"UCSClientServiceService");

	private Ucsclient_UcsclientSEI_Demo() {
	}

	public static void main(String args[]) throws java.lang.Exception {
	

		String endpoint = "http://172.31.5.68:8080/UCSClient/ucsclient";
		
		UCSClientServiceSE ss = new UCSClientServiceSE();
		
		UCSClientServiceSEI port = ss.getUcsclientPort();
		((BindingProvider)port).getRequestContext().put(
        	    BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
        	    endpoint);

		//Example Receive Message
		{
			System.out.println("Invoking receiveMessage...");
			MessageModel<AlertMessage> alert = new MessageModel<AlertMessage>();

			boolean out = port.receiveMessage(alert, "serverId");
			System.out.println("receiveMessage.result=" + out);

		}
		//Example Handle Notification
		{
			System.out.println("Invoking handleNotification...");
			MessageModel<NotificationMessage> msg = new MessageModel<NotificationMessage>();
	
			boolean out = port
					.handleNotification(msg, "serverId");
			System.out.println("handleNotification.result="
					+ out);

		}
		//Example Handle Exception
		{
			System.out.println("Invoking handleException...");
			MessageModel<SimpleMessage> msg = new MessageModel<SimpleMessage>();
			String userId = "User";
			
			ProcessingException exception = new ProcessingException();
			DeliveryAddress sender = new DeliveryAddress();
			sender.setAddress(new PhysicalAddress("SenderService","SenderAddress"));
			DeliveryAddress receiver = new DeliveryAddress();
			sender.setAddress(new PhysicalAddress("ReceiverService","ReceiverAddress"));
			boolean out = port.handleException(
					msg, sender, receiver,
					exception, "serverId");
			System.out.println("handleException.result="
					+ out);

		}
		//Example Call Ready
		{
			System.out.println("Invoking callReady...");
			Conversation _callReady_conversation = new Conversation();
			java.lang.String _callReady_callHandle = "Handle1";
			boolean out= port.callReady(
					_callReady_conversation, _callReady_callHandle, "serverId");
			System.out.println("callReady.result=" + out);

		}
		// Example Handle Response
		{
			System.out.println("Invoking handleResponse...");
			MessageModel<SimpleMessage> msg = new MessageModel<SimpleMessage>();
			MessageModel<? extends Message> inMsg;
			try {
				inMsg = port.handleResponse(msg, "serverId");
				System.out.println("handleResponse.result="
						);

			} catch (MissingBodyTypeException e) {
				System.out
						.println("Expected exception: MissingBodyTypeException has occurred.");
				System.out.println(e.toString());
			} catch (BadBodyException e) {
				System.out
						.println("Expected exception: BadBodyException has occurred.");
				System.out.println(e.toString());
			} catch (FeatureNotSupportedException e) {
				System.out
						.println("Expected exception: FeatureNotSupportedException has occurred.");
				System.out.println(e.toString());
			} catch (InvalidContentException e) {
				System.out
						.println("Expected exception: InvalidContentException has occurred.");
				System.out.println(e.toString());
			} catch (UndeliverableMessageException e) {
				System.out
						.println("Expected exception: UndeliverableMessageException has occurred.");
				System.out.println(e.toString());
			} catch (InvalidMessageException e) {
				System.out
						.println("Expected exception: InvalidMessageException has occurred.");
				System.out.println(e.toString());

			} catch (ServiceAdapterFaultException e) {
				System.out
						.println("Expected exception: ServiceAdapterFaultException has occurred.");
				System.out.println(e.toString());
			}
		}

		System.exit(0);
	}

}
